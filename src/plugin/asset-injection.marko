import { writeInitComponentsCode } from "marko/components";

static const template = TEMPLATE_IMPORT;
static const assets = __ASSETS_MANIFEST__[TEMPLATE_MODULE_ID];
static const renderAssets = function(out) {
  if (!out.global.assetsRendered) {
    const target = out.stream || out;
    if (assets) {
      if (assets.js) {
        target.write(
          `<script>(function(e,b,f){var g=[],c=0,h;f.forEach(function(d,k){var a=b.createElement("link");(h=a.relList&&a.relList.supports&&a.relList.supports("preload"))?(a.href=d,a.rel="preload",a.as="script"):(a=b.createElement("script"),a.src=d,a.defer=!0);a.addEventListener("load",function(){g[k]=1;if(c===k)for(;g[c];)h&&(a=b.createElement("script"),a.src=d,b.head.appendChild(a)),++c===f.length&&e.$initComponents&&e.$initComponents()});b.head.appendChild(a)})})(window,document,${
            JSON.stringify(assets.js.map(js => __webpack_public_path__+js))
          });</script>`
        );
      }
      if (assets.css) {
        assets.css.forEach(css => {
          target.write(
            `<link rel="stylesheet" href=${JSON.stringify(__webpack_public_path__+css)}>`
          );
        });
      }
    }
    out.global.assetsRendered = true;
  }
}

$ const _flush = out.flush;
$ const _end = out.end;
$ out.flush = function () {
  writeInitComponentsCode(out, out, false);
  renderAssets(out);
  _flush.apply(this, arguments);
}
$ out.end = function () {
  renderAssets(out);
  _end.apply(this, arguments);
}

<${template} ...input/>
<init-components/>